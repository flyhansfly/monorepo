"""
Intake Form Data Models and Validation

This file defines the data models and validation rules for the patient intake form system.
It handles both the input data from the frontend form and the output data from the LLM analysis.

Data Flow:
1. Input (Frontend -> Backend):
   - Patient intake form data (IntakeFormData)
   - Contains up to 21 questions about patient's condition
   - Questions 1-14 are always required
   - Questions 15-21 are conditionally required based on pain location:
     * Questions 15-17: Required if pain location is NOT "other"
     * Questions 18-20: Required if pain location is "lower_back" OR "neck"
     * Question 21: Required if pain location is ONLY "lower_back"
   - Validates all input fields against predefined enums and constraints

2. Output (Backend -> Frontend):
   - Analysis results (AnalysisResult)
   - Contains diagnosis, treatment recommendations, and clinical reasoning
   - Generated by the LLM based on the intake form data

Key Components:
- Enum classes: Define valid values for various form fields
- IntakeFormData: Main input model with conditional validation rules
- AnalysisResult: Output model containing LLM analysis
- Supporting models: BaseDiagnosis, ProbabilisticDiagnosis, etc.

Validation Rules:
- pain_severity: Integer between 0-10
- All enum fields: Must match predefined values
- Conditional fields:
  * detail_pain_activity, detail_pain_timing, detail_pain_accident: Required if "other" not in pain_location
  * detail_pain_position, detail_pain_lowerbody, detail_pain_fever: Required if "lower_back" or "neck" in pain_location
  * detail_pain_serious: Required if "lower_back" in pain_location and no other locations
- Probabilities: Must sum to 1.0 (with small floating point tolerance)
"""

from pydantic import BaseModel, Field, validator
from typing import List, Dict, Optional
from enum import Enum


class PainTime(str, Enum):
    MORNING = "morning"
    AFTERNOON = "afternoon"
    EVENING = "evening"
    NIGHT = "night"
    DURING_ACTIVITY = "during_activity"
    AT_REST = "at_rest"


class PainFrequency(str, Enum):
    CONSTANT = "constant"
    INTERMITTENT = "intermittent"


class PainDuration(str, Enum):
    LESS_THAN_1_WEEK = "less_than_1_week"
    ONE_TO_FOUR_WEEKS = "1_4_weeks"
    ONE_TO_THREE_MONTHS = "1_3_months"
    OVER_3_MONTHS = "over_3_months"


class PainOnset(str, Enum):
    GRADUALLY = "gradually"
    AFTER_SURGERY = "after_surgery"
    SUDDENLY = "suddenly"
    OTHER = "other"


class PainProgression(str, Enum):
    WORSE = "worse"
    SAME = "same"
    IMPROVED = "improved"


class ActivityLevel(str, Enum):
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"


class PainTimeAMPM(str, Enum):
    AM = "am"
    PM = "pm"
    BOTH = "both"


class YesNo(str, Enum):
    YES = "yes"
    NO = "no"


class PositionChangePain(str, Enum):
    NO = "no"
    YES_FLEXION = "yes_flexion"
    YES_EXTENSION = "yes_extension"
    YES_BOTH = "yes_both"


class BowelBladderChange(str, Enum):
    NO = "no"
    YES_BOWEL = "yes_bowel"
    YES_BLADDER = "yes_bladder"
    BOTH = "both"


class IntakeFormData(BaseModel):
    """
    Data schema for the combined patient intake form with conditional questions.
    Questions 1-14 are always required, while questions 15-21 are conditionally required
    based on the patient's pain location.
    """
    # Basic Questions (1-14) - Always Required
    primary_complaint: str
    pain_location: List[str]  # Multiple selections allowed
    pain_nature: List[str]    # Multiple selections allowed
    pain_severity: int = Field(ge=0, le=10)
    pain_frequency: PainFrequency
    pain_timing: List[PainTime]    # Multiple selections allowed
    pain_duration: PainDuration
    pain_onset: PainOnset
    pain_progression: PainProgression
    serious_symptom: List[str]  # Multiple selections allowed
    pain_movement: str
    pain_trigger: List[str]    # Multiple selections allowed
    pain_reliever: List[str]   # Multiple selections allowed
    pain_comment: Optional[str] = None

    # Additional Questions (15-17) - Required if pain location is not "other"
    detail_pain_activity: Optional[ActivityLevel] = None
    detail_pain_timing: Optional[PainTimeAMPM] = None
    detail_pain_accident: Optional[YesNo] = None

    # Additional Questions (18-20) - Required if pain location is Lower back or Neck
    detail_pain_position: Optional[PositionChangePain] = None
    detail_pain_lowerbody: Optional[YesNo] = None
    detail_pain_fever: Optional[YesNo] = None

    # Additional Question (21) - Required if pain location is Lower back Only
    detail_pain_serious: Optional[BowelBladderChange] = None

    @validator('detail_pain_activity', 'detail_pain_timing', 'detail_pain_accident')
    def validate_activity_timing_accident(cls, v, values):
        """Validate that questions 15-17 are provided if pain location is not 'other'"""
        if 'pain_location' in values and 'other' not in values['pain_location']:
            if v is None:
                raise ValueError("This field is required when pain location is not 'other'")
        return v

    @validator('detail_pain_position', 'detail_pain_lowerbody', 'detail_pain_fever')
    def validate_position_lowerbody_fever(cls, v, values):
        """Validate that questions 18-20 are provided if pain location is lower back or neck"""
        if 'pain_location' in values and any(loc in ['lower_back', 'neck'] for loc in values['pain_location']):
            if v is None:
                raise ValueError("This field is required when pain location is lower back or neck")
        return v

    @validator('detail_pain_serious')
    def validate_serious(cls, v, values):
        """Validate that question 21 is provided if pain location is only lower back"""
        if 'pain_location' in values:
            pain_locations = values['pain_location']
            if len(pain_locations) == 1 and pain_locations[0] == 'lower_back':
                if v is None:
                    raise ValueError("This field is required when pain location is only lower back")
        return v


class BaseDiagnosis(BaseModel):
    diagnosis: str
    probability: float = Field(ge=0, le=1)


class ProbabilisticDiagnosis(BaseModel):
    diagnosis: str
    icd10_code: str
    probability: float = Field(ge=0, le=1)
    simple_explanation: str


class MainDiagnosis(BaseModel):
    diagnosis: str
    icd10_code: str
    reasoning: str
    probability: float = Field(ge=0, le=1)
    simple_explanation: str


class BigMuscleGroup(BaseModel):
    name: str
    description: str
    probability: float = Field(ge=0, le=1)


class TreatmentRecommendation(BaseModel):
    type: str
    description: str
    priority: int = Field(ge=1, le=5)
    frequency: str
    duration: str


class AnalysisResult(BaseModel):
    """
    Schema for the analysis results returned by the LLM.
    """
    serious_vs_treatable: BaseDiagnosis
    differentiation_probabilities: List[BaseDiagnosis]
    main_diagnosis: MainDiagnosis
    other_probabilistic_diagnosis: List[ProbabilisticDiagnosis]
    treatment_recommendations: List[TreatmentRecommendation]
    reasoning: str
    session_id: str

    @validator('differentiation_probabilities')
    def validate_probabilities_sum(cls, v):
        total = sum(item.probability for item in v)
        if not 0.99 <= total <= 1.01:  # Allow for small floating point errors
            raise ValueError("Probabilities must sum to 1")
        return v

    class Config:
        json_schema_extra = {
            "example": {
                "serious_vs_treatable": {
                    "diagnosis": "treatable",
                    "probability": 0.95,
                    "reasoning": "Based on the symptoms..."
                },
                "differentiation_probabilities": [
                    {
                        "diagnosis": "Muscle Strain",
                        "probability": 0.7
                    }
                ],
                "main_diagnosis": {
                    "diagnosis": "Lumbar Muscle Strain",
                    "icd10_code": "S39.012",
                    "probability": 0.85,
                    "reasoning": "The symptoms suggest...",
                    "simple_explanation": "A strain in the lower back muscles"
                },
                "other_probabilistic_diagnosis": [
                    {
                        "diagnosis": "Lumbar Disc Herniation",
                        "icd10_code": "M51.26",
                        "probability": 0.15,
                        "reasoning": "Less likely but possible...",
                        "simple_explanation": "A bulging disc in the lower back"
                    }
                ],
                "treatment_recommendations": [
                    {
                        "title": "Rest and Ice",
                        "description": "Apply ice for 20 minutes every 2-3 hours"
                    }
                ],
                "session_id": "123e4567-e89b-12d3-a456-426614174000"
            }
        }
